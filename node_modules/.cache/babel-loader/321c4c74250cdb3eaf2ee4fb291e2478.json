{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\Tv-Shows\\\\warTv.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Slider from 'react-slick';\nimport Modal from 'react-modal';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fetchTvVideo } from '../../store/actions/tvshowpageActions';\nvar img_url = 'https://image.tmdb.org/t/p/original';\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    color: 'white',\n    background: '#080a0a none repeat scroll 0% 0%',\n    width: '600px'\n  }\n};\nModal.setAppElement('#root');\n\nvar WarTv =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WarTv, _React$Component);\n\n  function WarTv() {\n    var _this;\n\n    _classCallCheck(this, WarTv);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WarTv).call(this));\n    _this.state = {\n      modalIsOpen: false,\n      tv: {\n        id: '',\n        release_date: '',\n        vote_average: '',\n        title: ''\n      }\n    };\n    _this.openModal = _this.openModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.afterOpenModal = _this.afterOpenModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WarTv, [{\n    key: \"openModal\",\n    value: function openModal(tv) {\n      this.setState({\n        modalIsOpen: true,\n        tv: tv\n      }); //console.log(tv);\n      //console.log(tv.id);\n\n      this.props.fetchTvVideo(tv);\n    }\n  }, {\n    key: \"afterOpenModal\",\n    value: function afterOpenModal() {\n      this.subtitle.style.color = '#f00';\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        modalIsOpen: false,\n        tv: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //send same mapped data from this into the modal when clicked on the button <FontAwesomeIcon onClick....\n      var war;\n\n      if (this.props.war.length > 0) {\n        war = this.props.war[0].results.map(function (w) {\n          return React.createElement(\"div\", {\n            className: \"sliderbox\",\n            key: w.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"text-block\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, React.createElement(\"h5\", {\n            className: \"sliderTitle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, w.name), React.createElement(FontAwesomeIcon, {\n            onClick: function onClick() {\n              return _this2.openModal(w);\n            },\n            icon: \"plus-circle\",\n            className: \"sliderIcon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            className: \"sliderRelease\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, w.first_air_date), React.createElement(\"p\", {\n            className: \"sliderVote\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, w.vote_average)), React.createElement(\"img\", {\n            className: \"sliderImg\",\n            src: \"\".concat(img_url).concat(w.poster_path),\n            alt: w.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }));\n        });\n      }\n\n      var settings = {\n        dots: true,\n        infinite: true,\n        speed: 500,\n        slidesToShow: 6,\n        slidesToScroll: 3,\n        draggable: true\n      };\n      var tmpId = this.props.videos.length > 0 ? this.props.videos[0][0].key : '';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Slider, Object.assign({}, settings, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), war), React.createElement(Modal, {\n        isOpen: this.state.modalIsOpen,\n        onAfterOpen: this.afterOpenModal,\n        onRequestClose: this.closeModal,\n        style: customStyles,\n        contentLabel: \"tv modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        ref: function ref(subtitle) {\n          return _this2.subtitle = subtitle;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.state.tv.name), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Id: \", this.state.tv.id), React.createElement(\"h5\", {\n        className: \"modalRelease\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Released: \", this.state.tv.first_air_date), React.createElement(\"h5\", {\n        className: \"modalVote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Rating: \", this.state.tv.vote_average), tmpId.length > 0 ? React.createElement(\"iframe\", {\n        width: \"560\",\n        height: \"315\",\n        src: \"https://www.youtube.com/embed/\".concat(tmpId),\n        frameBorder: \"0\",\n        title: \"youtube\",\n        allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(\"button\", {\n        className: \"modalClose\",\n        onClick: this.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"X\")));\n    }\n  }]);\n\n  return WarTv;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    war: state.tv.war,\n    videos: state.movTv.videostv\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchTvVideo: fetchTvVideo\n})(WarTv);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\Tv-Shows\\warTv.js"],"names":["React","connect","Slider","Modal","FontAwesomeIcon","fetchTvVideo","img_url","customStyles","content","top","left","right","bottom","marginRight","transform","color","background","width","setAppElement","WarTv","state","modalIsOpen","tv","id","release_date","vote_average","title","openModal","bind","afterOpenModal","closeModal","setState","props","subtitle","style","war","length","results","map","w","name","first_air_date","poster_path","settings","dots","infinite","speed","slidesToShow","slidesToScroll","draggable","tmpId","videos","key","Component","mapStateToProps","movTv","videostv"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AAEA,SAASC,YAAT,QAA6B,uCAA7B;AAEA,IAAMC,OAAO,GAAG,qCAAhB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAG;AACRC,IAAAA,GAAG,EAAqB,KADhB;AAERC,IAAAA,IAAI,EAAoB,KAFhB;AAGRC,IAAAA,KAAK,EAAmB,MAHhB;AAIRC,IAAAA,MAAM,EAAkB,MAJhB;AAKRC,IAAAA,WAAW,EAAa,MALhB;AAMRC,IAAAA,SAAS,EAAe,uBANhB;AAORC,IAAAA,KAAK,EAAmB,OAPhB;AAQRC,IAAAA,UAAU,EAAc,kCARhB;AASRC,IAAAA,KAAK,EAAmB;AAThB;AADO,CAArB;AAcAd,KAAK,CAACe,aAAN,CAAoB,OAApB;;IAEMC,K;;;;;AACF,mBAAc;AAAA;;AAAA;;AACV;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,KADJ;AAETC,MAAAA,EAAE,EAAE;AACAC,QAAAA,EAAE,EAAE,EADJ;AACQC,QAAAA,YAAY,EAAE,EADtB;AAC0BC,QAAAA,YAAY,EAAE,EADxC;AAC4CC,QAAAA,KAAK,EAAE;AADnD;AAFK,KAAb;AAOA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,uDAAtB;AACA,UAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,uDAAlB;AAZU;AAeb;;;;8BAESN,E,EAAI;AACV,WAAKS,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAE,IAAd;AAAoBC,QAAAA,EAAE,EAAEA;AAAxB,OAAd,EADU,CAEV;AACA;;AACA,WAAKU,KAAL,CAAW3B,YAAX,CAAwBiB,EAAxB;AACH;;;qCAEe;AACZ,WAAKW,QAAL,CAAcC,KAAd,CAAoBnB,KAApB,GAA4B,MAA5B;AACH;;;iCAEW;AACR,WAAKgB,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAE,KAAd;AAAqBC,QAAAA,EAAE,EAAE;AAAzB,OAAd;AACH;;;6BAEO;AAAA;;AACR;AACA,UAAIa,GAAJ;;AACA,UAAG,KAAKH,KAAL,CAAWG,GAAX,CAAeC,MAAf,GAAwB,CAA3B,EAA6B;AACzBD,QAAAA,GAAG,GAAG,KAAKH,KAAL,CAAWG,GAAX,CAAe,CAAf,EAAkBE,OAAlB,CAA0BC,GAA1B,CAA8B,UAAAC,CAAC;AAAA,iBACjC;AAAK,YAAA,SAAS,EAAC,WAAf;AAA2B,YAAA,GAAG,EAAEA,CAAC,CAAChB,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA6BgB,CAAC,CAACC,IAA/B,CADJ,EAEI,oBAAC,eAAD;AAAiB,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACb,SAAL,CAAeY,CAAf,CAAN;AAAA,aAA1B;AAAmD,YAAA,IAAI,EAAC,aAAxD;AAAsE,YAAA,SAAS,EAAC,YAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGI;AAAG,YAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BA,CAAC,CAACE,cAAhC,CAHJ,EAII;AAAG,YAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA2BF,CAAC,CAACd,YAA7B,CAJJ,CADJ,EAOI;AAAK,YAAA,SAAS,EAAC,WAAf;AAA2B,YAAA,GAAG,YAAKnB,OAAL,SAAeiC,CAAC,CAACG,WAAjB,CAA9B;AAA8D,YAAA,GAAG,EAAEH,CAAC,CAACC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,CADiC;AAAA,SAA/B,CAAN;AAWH;;AAED,UAAMG,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAE,IADO;AAEbC,QAAAA,QAAQ,EAAE,IAFG;AAGbC,QAAAA,KAAK,EAAE,GAHM;AAIbC,QAAAA,YAAY,EAAE,CAJD;AAKbC,QAAAA,cAAc,EAAE,CALH;AAMbC,QAAAA,SAAS,EAAE;AANE,OAAjB;AASA,UAAIC,KAAK,GAAG,KAAKlB,KAAL,CAAWmB,MAAX,CAAkBf,MAAlB,GAA2B,CAA3B,GAA+B,KAAKJ,KAAL,CAAWmB,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwBC,GAAvD,GAA4D,EAAxE;AACI,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD,oBAAYT,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACKR,GADL,CADJ,EAII,oBAAC,KAAD;AACA,QAAA,MAAM,EAAE,KAAKf,KAAL,CAAWC,WADnB;AAEA,QAAA,WAAW,EAAE,KAAKQ,cAFlB;AAGA,QAAA,cAAc,EAAE,KAAKC,UAHrB;AAIA,QAAA,KAAK,EAAEvB,YAJP;AAKA,QAAA,YAAY,EAAC,UALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUA;AAAI,QAAA,GAAG,EAAE,aAAA0B,QAAQ;AAAA,iBAAI,MAAI,CAACA,QAAL,GAAgBA,QAApB;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgD,KAAKb,KAAL,CAAWE,EAAX,CAAckB,IAA9D,CAVA,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAQ,KAAKpB,KAAL,CAAWE,EAAX,CAAcC,EAAtB,CADA,EAEA;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAwC,KAAKH,KAAL,CAAWE,EAAX,CAAcmB,cAAtD,CAFA,EAGA;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmC,KAAKrB,KAAL,CAAWE,EAAX,CAAcG,YAAjD,CAHA,EAICyB,KAAK,CAACd,MAAN,GAAc,CAAd,GAAiB;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAoB,QAAA,MAAM,EAAC,KAA3B;AAAiC,QAAA,GAAG,0CAAmCc,KAAnC,CAApC;AAAgF,QAAA,WAAW,EAAC,GAA5F;AAAgG,QAAA,KAAK,EAAC,SAAtG;AAAgH,QAAA,KAAK,EAAC,yEAAtH;AAAgM,QAAA,eAAe,MAA/M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,GAA6O;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJ9O,CAXJ,EAiBA;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAE,KAAKpB,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjBA,CAJJ,CADJ;AA0BH;;;;EAtFe9B,KAAK,CAACqD,S;;AAyF1B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAClC,KAAD,EAAW;AAC/B,SAAO;AACHe,IAAAA,GAAG,EAAEf,KAAK,CAACE,EAAN,CAASa,GADX;AAEHgB,IAAAA,MAAM,EAAE/B,KAAK,CAACmC,KAAN,CAAYC;AAFjB,GAAP;AAIH,CALD;;AAOA,eAAevD,OAAO,CAACqD,eAAD,EAAiB;AAAEjD,EAAAA,YAAY,EAAZA;AAAF,CAAjB,CAAP,CAA0Cc,KAA1C,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Slider from 'react-slick';\r\nimport Modal from 'react-modal';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { fetchTvVideo } from '../../store/actions/tvshowpageActions';\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)',\r\n      color                 : 'white',\r\n      background            : '#080a0a none repeat scroll 0% 0%',\r\n      width                 : '600px',\r\n    }\r\n};\r\n\r\nModal.setAppElement('#root')\r\n\r\nclass WarTv extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            modalIsOpen: false,\r\n            tv: {\r\n                id: '', release_date: '', vote_average: '', title: ''\r\n            }\r\n        };\r\n\r\n        this.openModal = this.openModal.bind(this);\r\n        this.afterOpenModal = this.afterOpenModal.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n\r\n\r\n    }\r\n\r\n    openModal(tv) {\r\n        this.setState({modalIsOpen: true, tv: tv});\r\n        //console.log(tv);\r\n        //console.log(tv.id);\r\n        this.props.fetchTvVideo(tv);\r\n    }\r\n\r\n    afterOpenModal(){\r\n        this.subtitle.style.color = '#f00';\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({modalIsOpen: false, tv: ''});\r\n    }\r\n\r\n    render(){\r\n    //send same mapped data from this into the modal when clicked on the button <FontAwesomeIcon onClick....\r\n    let war;\r\n    if(this.props.war.length > 0){\r\n        war = this.props.war[0].results.map(w => (\r\n            <div className='sliderbox' key={w.id}>\r\n                <div className='text-block'>\r\n                    <h5 className='sliderTitle'>{w.name}</h5>\r\n                    <FontAwesomeIcon onClick={() => this.openModal(w)} icon=\"plus-circle\" className='sliderIcon' />\r\n                    <p className='sliderRelease'>{w.first_air_date}</p>\r\n                    <p className='sliderVote'>{w.vote_average}</p>\r\n                </div>\r\n                <img className='sliderImg' src={`${img_url}${w.poster_path}`} alt={w.name} />\r\n            </div>\r\n        ));\r\n    }\r\n\r\n    const settings = {\r\n        dots: true,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 6,\r\n        slidesToScroll: 3,\r\n        draggable: true,\r\n    };\r\n\r\n    let tmpId = this.props.videos.length > 0 ? this.props.videos[0][0].key: '';\r\n        return (\r\n            <div>\r\n                <Slider {...settings}>\r\n                    {war}\r\n                </Slider>\r\n                <Modal\r\n                isOpen={this.state.modalIsOpen}\r\n                onAfterOpen={this.afterOpenModal}\r\n                onRequestClose={this.closeModal}\r\n                style={customStyles}\r\n                contentLabel='tv modal'\r\n                >\r\n                {\r\n                    //Would like to print relative data here\r\n                }\r\n                <h2 ref={subtitle => this.subtitle = subtitle}>{this.state.tv.name}</h2>\r\n                    <div>\r\n                    <p>Id: {this.state.tv.id}</p>\r\n                    <h5 className='modalRelease'>Released: {this.state.tv.first_air_date}</h5>\r\n                    <h5 className='modalVote'>Rating: {this.state.tv.vote_average}</h5>\r\n                    {tmpId.length >0 ?<iframe width=\"560\" height=\"315\" src={`https://www.youtube.com/embed/${tmpId}`} frameBorder=\"0\" title='youtube' allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe> : <p className='loading'>Loading...</p>}\r\n                    </div>\r\n                <button className='modalClose' onClick={this.closeModal}>X</button>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        war: state.tv.war,\r\n        videos: state.movTv.videostv\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{ fetchTvVideo })(WarTv);"]},"metadata":{},"sourceType":"module"}