{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\search.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPersonInfo } from '../store/actions/homepageActions';\nvar img_url = 'https://image.tmdb.org/t/p/original';\nvar personId;\n\nvar SearchPage = function SearchPage(props) {\n  var results;\n\n  if (props.results.length > 0) {\n    results = props.results[0].results;\n\n    if (props.results[0].results[0].media_type !== 'person') {\n      results.map(function (rs) {\n        do {\n          if (rs.media_type === 'movie' && rs.poster_path !== null) return React.createElement(\"div\", {\n            className: \".col-md-4\",\n            key: rs.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"search-results\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20\n            },\n            __self: this\n          }, React.createElement(\"h5\", {\n            className: \"search-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21\n            },\n            __self: this\n          }, rs.title), React.createElement(\"img\", {\n            className: \"search-image\",\n            src: \"\".concat(img_url).concat(rs.poster_path),\n            alt: rs.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            className: \"search-release\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }, \"Released: \".concat(rs.release_date)), React.createElement(\"p\", {\n            className: \"search-vote\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }, \"Rating: \".concat(rs.vote_average)), React.createElement(\"p\", {\n            className: \"search-overview\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }, rs.overview)));\n          if (rs.poster_path === 'null' || rs.poster_path === '') return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          }, null);\n          if (rs.media_type === 'tv' && rs.poster_path !== null) return React.createElement(\"div\", {\n            className: \".col-md-4\",\n            key: rs.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"search-results\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, React.createElement(\"h5\", {\n            className: \"search-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35\n            },\n            __self: this\n          }, rs.name), React.createElement(\"img\", {\n            className: \"search-image\",\n            src: \"\".concat(img_url).concat(rs.poster_path),\n            alt: rs.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            className: \"search-release\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          }, \"Aired: \".concat(rs.first_air_date)), React.createElement(\"p\", {\n            className: \"search-vote\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, \"Rating: \".concat(rs.vote_average)), React.createElement(\"p\", {\n            className: \"search-overview\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }, rs.overview)));\n          if (rs.poster_path === '' || rs.backdrop_path === '') return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, null);\n        } while (rs.media_type !== 'person');\n\n        personId = rs.id;\n        return React.createElement(\"div\", {\n          className: \"row\",\n          key: rs.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \".col-md-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"search-results-person\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"search-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, rs.name), React.createElement(\"img\", {\n          className: \"search-image\",\n          src: \"\".concat(img_url).concat(rs.profile_path),\n          alt: rs.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return props.fetchPersonInfo(personId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, \"Click This\"))));\n      });\n    }\n  }\n  /*let person;\r\n      if (props.person.length > 0){\r\n          person = props.person.map(person => {\r\n            })\r\n      }*/\n\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, results));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.movTv.results,\n    person: state.movTv.personInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPersonInfo: fetchPersonInfo\n})(SearchPage);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\search.js"],"names":["React","connect","fetchPersonInfo","img_url","personId","SearchPage","props","results","length","media_type","map","rs","poster_path","id","title","release_date","vote_average","overview","name","first_air_date","backdrop_path","profile_path","mapStateToProps","state","movTv","person","personInfo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport { fetchPersonInfo } from '../store/actions/homepageActions'\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nlet personId;\r\n\r\nconst SearchPage = (props) => {\r\n    let results;\r\n        if(props.results.length > 0){\r\n            results = props.results[0].results;\r\n            if (props.results[0].results[0].media_type !== 'person') {\r\n            results.map(rs => {\r\n            do {\r\n                if(rs.media_type === 'movie' && rs.poster_path !== null)\r\n                    return (\r\n                        <div className='.col-md-4' key={rs.id}>\r\n                            <div className='search-results'>\r\n                                <h5 className='search-title'>{rs.title}</h5>\r\n                                <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                                <p className='search-release'>{`Released: ${rs.release_date}`}</p>\r\n                                <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                                <p className='search-overview'>{rs.overview}</p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                if (rs.poster_path === 'null' || rs.poster_path === '')\r\n                        return (<div>{null}</div>)\r\n                if (rs.media_type === 'tv' && rs.poster_path !== null)\r\n                    return (\r\n                    <div className='.col-md-4' key={rs.id}>\r\n                        <div className='search-results'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                            <p className='search-release'>{`Aired: ${rs.first_air_date}`}</p>\r\n                            <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                            <p className='search-overview'>{rs.overview}</p>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                if (rs.poster_path === '' || rs.backdrop_path === '')\r\n                        return (<div>{null}</div>);\r\n                } while (rs.media_type !== 'person');\r\n                    personId = rs.id;\r\n                    return (\r\n                            <div className='row' key={rs.id}>\r\n                                <div className='.col-md-4'>\r\n                                    <div className='search-results-person'>\r\n                                        <h5 className='search-title'>{rs.name}</h5>\r\n                                        <img className='search-image' src={`${img_url}${rs.profile_path}`} alt={rs.name} />\r\n                                        <button onClick={() => props.fetchPersonInfo(personId)}>Click This</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    )\r\n        } \r\n            \r\n            )\r\n        }\r\n    }\r\n\r\n    /*let person;\r\n        if (props.person.length > 0){\r\n            person = props.person.map(person => {\r\n\r\n            })\r\n        }*/\r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row'>\r\n                {results}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.movTv.results,\r\n        person: state.movTv.personInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPersonInfo })(SearchPage);"]},"metadata":{},"sourceType":"module"}