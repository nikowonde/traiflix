{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\search.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPersonInfo } from '../store/actions/homepageActions';\nvar img_url = 'https://image.tmdb.org/t/p/original';\nvar personId;\n\nvar SearchPage = function SearchPage(props) {\n  var results;\n\n  if (props.results.length > 0) {\n    results = props.results[0].results.map(function (rs) {\n      if (rs.media_type === 'movie' && rs.poster_path !== null && rs[0].media_type === 'person' ? null : '') return React.createElement(\"div\", {\n        className: \".col-md-4\",\n        key: rs.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"search-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, rs.title), React.createElement(\"img\", {\n        className: \"search-image\",\n        src: \"\".concat(img_url).concat(rs.poster_path),\n        alt: rs.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"search-release\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Released: \".concat(rs.release_date)), React.createElement(\"p\", {\n        className: \"search-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Rating: \".concat(rs.vote_average)), React.createElement(\"p\", {\n        className: \"search-overview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, rs.overview)));\n      if (rs.poster_path === 'null' || rs.poster_path === '') return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, null);\n      if (rs.media_type === 'tv' && rs.poster_path !== null && rs[0].media_type === 'person' ? null : '') return React.createElement(\"div\", {\n        className: \".col-md-4\",\n        key: rs.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"search-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, rs.name), React.createElement(\"img\", {\n        className: \"search-image\",\n        src: \"\".concat(img_url).concat(rs.poster_path),\n        alt: rs.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"search-release\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Aired: \".concat(rs.first_air_date)), React.createElement(\"p\", {\n        className: \"search-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Rating: \".concat(rs.vote_average)), React.createElement(\"p\", {\n        className: \"search-overview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, rs.overview)));\n      if (rs.poster_path === '' || rs.backdrop_path === '') return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, null);\n\n      if (rs.media_type === 'person') {\n        personId = rs.id;\n        return React.createElement(\"div\", {\n          className: \"row\",\n          key: rs.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \".col-md-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"search-results-person\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"search-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, rs.name), React.createElement(\"img\", {\n          className: \"search-image\",\n          src: \"\".concat(img_url).concat(rs.profile_path),\n          alt: rs.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return props.fetchPersonInfo(personId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, \"Click This\"))));\n      } else {\n        return React.createElement(\"div\", {\n          key: rs.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, null);\n      }\n    });\n  }\n  /*let person;\r\n      if (props.person.length > 0){\r\n          person = props.person.map(person => {\r\n            })\r\n      }*/\n\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, results));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.movTv.results,\n    person: state.movTv.personInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPersonInfo: fetchPersonInfo\n})(SearchPage);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\search.js"],"names":["React","connect","fetchPersonInfo","img_url","personId","SearchPage","props","results","length","map","rs","media_type","poster_path","id","title","release_date","vote_average","overview","name","first_air_date","backdrop_path","profile_path","mapStateToProps","state","movTv","person","personInfo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport { fetchPersonInfo } from '../store/actions/homepageActions'\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nlet personId;\r\n\r\nconst SearchPage = (props) => {\r\n    let results;\r\n        if(props.results.length > 0){\r\n            results = props.results[0].results.map(rs => {\r\n                if(rs.media_type === 'movie' && rs.poster_path !== null && rs[0].media_type === 'person' ? null : '')\r\n                    return (\r\n                        <div className='.col-md-4' key={rs.id}>\r\n                            <div className='search-results'>\r\n                                <h5 className='search-title'>{rs.title}</h5>\r\n                                <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                                <p className='search-release'>{`Released: ${rs.release_date}`}</p>\r\n                                <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                                <p className='search-overview'>{rs.overview}</p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                if (rs.poster_path === 'null' || rs.poster_path === '')\r\n                        return (<div>{null}</div>)\r\n                if (rs.media_type === 'tv' && rs.poster_path !== null && rs[0].media_type === 'person' ? null : '')\r\n                    return (\r\n                    <div className='.col-md-4' key={rs.id}>\r\n                        <div className='search-results'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                            <p className='search-release'>{`Aired: ${rs.first_air_date}`}</p>\r\n                            <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                            <p className='search-overview'>{rs.overview}</p>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                if (rs.poster_path === '' || rs.backdrop_path === '')\r\n                        return (<div>{null}</div>);\r\n                if (rs.media_type === 'person'){\r\n                    personId = rs.id;\r\n                    return (\r\n                        <div className='row' key={rs.id}>\r\n                            <div className='.col-md-4'>\r\n                                <div className='search-results-person'>\r\n                                    <h5 className='search-title'>{rs.name}</h5>\r\n                                    <img className='search-image' src={`${img_url}${rs.profile_path}`} alt={rs.name} />\r\n                                    <button onClick={() => props.fetchPersonInfo(personId)}>Click This</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (<div key={rs.id}>{null}</div>);\r\n                }\r\n            }\r\n            \r\n            )\r\n        }\r\n\r\n    /*let person;\r\n        if (props.person.length > 0){\r\n            person = props.person.map(person => {\r\n\r\n            })\r\n        }*/\r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row'>\r\n                {results}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.movTv.results,\r\n        person: state.movTv.personInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPersonInfo })(SearchPage);"]},"metadata":{},"sourceType":"module"}