{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\sliModalTv.js\";\nimport React from 'react';\nimport Modal from 'react-modal';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\nimport { fetchTvVideo } from '../store/actions/moviesAndTvActions';\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    color: 'white',\n    background: '#080a0a none repeat scroll 0% 0%',\n    width: '600px',\n    overflow: 'hidden'\n  }\n}; // Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n\nModal.setAppElement('#root');\n\nvar SliModalTv =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SliModalTv, _React$Component);\n\n  function SliModalTv() {\n    var _this;\n\n    _classCallCheck(this, SliModalTv);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SliModalTv).call(this));\n    _this.state = {\n      modalIsOpen: false\n    };\n    _this.openModal = _this.openModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.afterOpenModal = _this.afterOpenModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SliModalTv, [{\n    key: \"openModal\",\n    value: function openModal(tvId) {\n      this.setState({\n        modalIsOpen: true\n      });\n      this.props.fetchTvVideo(tvId);\n    }\n  }, {\n    key: \"afterOpenModal\",\n    value: function afterOpenModal() {\n      // references are now sync'd and can be accessed.\n      this.subtitle.style.color = '#f00';\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        modalIsOpen: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tvId = this.props.toModal.id;\n      var tmpId = this.props.videos.length > 0 ? this.props.videos[0][0].key : '';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        onClick: function onClick() {\n          return _this2.openModal(tvId);\n        },\n        icon: \"plus-circle\",\n        className: \"sliderIcon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        isOpen: this.state.modalIsOpen,\n        onAfterOpen: this.afterOpenModal,\n        onRequestClose: this.closeModal,\n        style: customStyles,\n        contentLabel: \"Example Modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        ref: function ref(subtitle) {\n          return _this2.subtitle = subtitle;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.props.toModal.name), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Id: \", this.props.toModal.id), React.createElement(\"h5\", {\n        className: \"modalRelease\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Released: \", this.props.toModal.first_air_date), React.createElement(\"h5\", {\n        className: \"modalVote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Rating: \", this.props.toModal.vote_average), tmpId.length > 0 ? React.createElement(\"iframe\", {\n        width: \"560\",\n        height: \"315\",\n        src: \"https://www.youtube.com/embed/\".concat(tmpId),\n        frameborder: \"0\",\n        title: \"youtube\",\n        allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n        allowfullscreen: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(\"button\", {\n        className: \"modalClose\",\n        onClick: this.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"X\")));\n    }\n  }]);\n\n  return SliModalTv;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    videos: state.movTv.videostv\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchTvVideo: fetchTvVideo\n})(SliModalTv); //<p className='modalDescription'>{this.props.trending.overview}</p>","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\sliModalTv.js"],"names":["React","Modal","FontAwesomeIcon","connect","fetchTvVideo","customStyles","content","top","left","right","bottom","marginRight","transform","color","background","width","overflow","setAppElement","SliModalTv","state","modalIsOpen","openModal","bind","afterOpenModal","closeModal","tvId","setState","props","subtitle","style","toModal","id","tmpId","videos","length","key","name","first_air_date","vote_average","Component","mapStateToProps","movTv","videostv"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchTvVideo } from '../store/actions/moviesAndTvActions';\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)',\r\n    color                 : 'white',\r\n    background: '#080a0a none repeat scroll 0% 0%',\r\n    width: '600px',\r\n    overflow: 'hidden',\r\n  }\r\n};\r\n\r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\nModal.setAppElement('#root')\r\n\r\nclass SliModalTv extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      modalIsOpen: false\r\n    };\r\n\r\n    this.openModal = this.openModal.bind(this);\r\n    this.afterOpenModal = this.afterOpenModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n  }\r\n\r\n  openModal(tvId) {\r\n    this.setState({modalIsOpen: true});\r\n    this.props.fetchTvVideo(tvId);\r\n  }\r\n\r\n  afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n    this.subtitle.style.color = '#f00';\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({modalIsOpen: false});\r\n  }\r\n  render() {\r\n    let tvId = this.props.toModal.id;\r\n    let tmpId = (this.props.videos.length > 0)?this.props.videos[0][0].key: '';\r\n    return (\r\n      <div>\r\n        <FontAwesomeIcon onClick={() => this.openModal(tvId)} icon=\"plus-circle\" className='sliderIcon' />\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          onAfterOpen={this.afterOpenModal}\r\n          onRequestClose={this.closeModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n          <h2 ref={subtitle => this.subtitle = subtitle}>{this.props.toModal.name}</h2>\r\n          <div>\r\n              <p>Id: {this.props.toModal.id}</p>\r\n              <h5 className='modalRelease'>Released: {this.props.toModal.first_air_date}</h5>\r\n              <h5 className='modalVote'>Rating: {this.props.toModal.vote_average}</h5>\r\n    {tmpId.length >0 ?<iframe width=\"560\" height=\"315\" src={`https://www.youtube.com/embed/${tmpId}`} frameborder=\"0\" title='youtube' allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> : <p className='loading'>Loading...</p>}\r\n          </div>\r\n          <button className='modalClose' onClick={this.closeModal}>X</button>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    videos: state.movTv.videostv\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchTvVideo })(SliModalTv);\r\n\r\n//<p className='modalDescription'>{this.props.trending.overview}</p>"]},"metadata":{},"sourceType":"module"}