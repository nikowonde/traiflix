{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\trending.js\";\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Slider from 'react-slick';\nimport SliModal from './sliModal';\nvar img_url = 'https://image.tmdb.org/t/p/original';\n\nvar Trending = function Trending(props) {\n  var settings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 6,\n    slidesToScroll: 3\n  };\n  var trending;\n\n  if (props.trending.length > 0) {\n    //console.log(props.trending[0].results)\n    trending = props.trending[0].results.map(function (tr) {\n      return React.createElement(\"div\", {\n        className: \"sliderbox\",\n        key: tr.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"sliderTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, tr.title), React.createElement(SliModal, {\n        toModal: tr,\n        img_url: img_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"sliderRelease\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, tr.release_date), React.createElement(\"p\", {\n        className: \"sliderVote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, tr.vote_average)), React.createElement(\"img\", {\n        className: \"sliderImg\",\n        src: \"\".concat(img_url).concat(tr.poster_path),\n        alt: tr.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    });\n  }\n\n  var slickListDiv = document.getElementsByClassName('slick-list')[0];\n\n  var scroll = function scroll() {\n    return slickListDiv.addEventListener('wheel', function (event) {\n      event.preventDefault();\n      event.deltaY > 0 ? _this.slider.slickNext() : _this.slider.slickPrev();\n    });\n  };\n\n  scroll();\n  return React.createElement(Slider, Object.assign({}, settings, {\n    ref: function ref(slider) {\n      return _this.slider = slider.innerSlider;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), trending);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    trending: state.movTv.trending\n  };\n};\n\nexport default connect(mapStateToProps)(Trending); //poster={tr.results.poster_path} title={tr.results.title} description={tr.results.overview} release={tr.results.release_date} key={tr.results[0].id}\n\n/*\r\n            <div classNameName='col-sm' key={tr.results[0].id}>\r\n                <img classNameName='sliderImg' src={tr.results[0].poster_path} alt={tr.results.title} />\r\n                <h4 classNameName='sliderTitle'>{tr.results[0].title}</h4>\r\n                <p classNameName='sliderDescription'>{tr.results[0].overview}</p>\r\n            </div>\r\n\r\n\r\n\r\n*/","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\trending.js"],"names":["React","connect","Slider","SliModal","img_url","Trending","props","settings","dots","infinite","speed","slidesToShow","slidesToScroll","trending","length","results","map","tr","id","title","release_date","vote_average","poster_path","slickListDiv","document","getElementsByClassName","scroll","addEventListener","event","preventDefault","deltaY","slider","slickNext","slickPrev","innerSlider","mapStateToProps","state","movTv"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,IAAMC,OAAO,GAAG,qCAAhB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB,MAAMC,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAAE,IADO;AAEbC,IAAAA,QAAQ,EAAE,IAFG;AAGbC,IAAAA,KAAK,EAAE,GAHM;AAIbC,IAAAA,YAAY,EAAE,CAJD;AAKbC,IAAAA,cAAc,EAAE;AALH,GAAjB;AAQA,MAAIC,QAAJ;;AACA,MAAIP,KAAK,CAACO,QAAN,CAAeC,MAAf,GAAwB,CAA5B,EAA8B;AAC1B;AACAD,IAAAA,QAAQ,GAAGP,KAAK,CAACO,QAAN,CAAe,CAAf,EAAkBE,OAAlB,CAA0BC,GAA1B,CAA8B,UAAAC,EAAE;AAAA,aACnC;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,GAAG,EAAEA,EAAE,CAACC,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BD,EAAE,CAACE,KAAhC,CADJ,EAEI,oBAAC,QAAD;AACA,QAAA,OAAO,EAAEF,EADT;AAEA,QAAA,OAAO,EAAEb,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAMI;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8Ba,EAAE,CAACG,YAAjC,CANJ,EAOI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BH,EAAE,CAACI,YAA9B,CAPJ,CADJ,EAUI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,GAAG,YAAKjB,OAAL,SAAea,EAAE,CAACK,WAAlB,CAA9B;AAA+D,QAAA,GAAG,EAAEL,EAAE,CAACE,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,CADmC;AAAA,KAAhC,CAAX;AAcH;;AACD,MAAII,YAAY,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAAnB;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,WAAMH,YAAY,CAACI,gBAAb,CAA8B,OAA9B,EAAuC,UAAAC,KAAK,EAAI;AACnEA,MAAAA,KAAK,CAACC,cAAN;AACAD,MAAAA,KAAK,CAACE,MAAN,GAAe,CAAf,GAAmB,KAAI,CAACC,MAAL,CAAYC,SAAZ,EAAnB,GAA6C,KAAI,CAACD,MAAL,CAAYE,SAAZ,EAA7C;AACD,KAHoB,CAAN;AAAA,GAAf;;AAIAP,EAAAA,MAAM;AACN,SACI,oBAAC,MAAD,oBAAYnB,QAAZ;AAAsB,IAAA,GAAG,EAAE,aAAAwB,MAAM;AAAA,aAAI,KAAI,CAACA,MAAL,GAAcA,MAAM,CAACG,WAAzB;AAAA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKrB,QADL,CADJ;AAKH,CAtCD;;AAyCA,IAAMsB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAO;AACHvB,IAAAA,QAAQ,EAAEuB,KAAK,CAACC,KAAN,CAAYxB;AADnB,GAAP;AAGH,CAJD;;AAMA,eAAeZ,OAAO,CAACkC,eAAD,CAAP,CAAyB9B,QAAzB,CAAf,C,CAEA;;AACA","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Slider from 'react-slick';\r\nimport SliModal from './sliModal';\r\n\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst Trending = (props) => {\r\n    const settings = {\r\n        dots: true,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 6,\r\n        slidesToScroll: 3\r\n    };\r\n\r\n    let trending;\r\n    if (props.trending.length > 0){\r\n        //console.log(props.trending[0].results)\r\n        trending = props.trending[0].results.map(tr => (\r\n                <div className='sliderbox' key={tr.id}>\r\n                    <div className='text-block'>\r\n                        <h5 className='sliderTitle'>{tr.title}</h5>\r\n                        <SliModal\r\n                        toModal={tr}\r\n                        img_url={img_url}\r\n                        />\r\n                        <p className='sliderRelease'>{tr.release_date}</p>\r\n                        <p className='sliderVote'>{tr.vote_average}</p>\r\n                    </div>\r\n                    <img className='sliderImg' src={`${img_url}${tr.poster_path}`} alt={tr.title} />\r\n                </div>\r\n        ));\r\n    }\r\n    let slickListDiv = document.getElementsByClassName('slick-list')[0]\r\n    const scroll = () => slickListDiv.addEventListener('wheel', event => {\r\n      event.preventDefault()\r\n      event.deltaY > 0 ? this.slider.slickNext() : this.slider.slickPrev()\r\n    })\r\n    scroll();\r\n    return (\r\n        <Slider {...settings} ref={slider => this.slider = slider.innerSlider}>\r\n            {trending}\r\n        </Slider>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        trending: state.movTv.trending\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Trending);\r\n\r\n//poster={tr.results.poster_path} title={tr.results.title} description={tr.results.overview} release={tr.results.release_date} key={tr.results[0].id}\r\n/*\r\n            <div classNameName='col-sm' key={tr.results[0].id}>\r\n                <img classNameName='sliderImg' src={tr.results[0].poster_path} alt={tr.results.title} />\r\n                <h4 classNameName='sliderTitle'>{tr.results[0].title}</h4>\r\n                <p classNameName='sliderDescription'>{tr.results[0].overview}</p>\r\n            </div>\r\n\r\n\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}