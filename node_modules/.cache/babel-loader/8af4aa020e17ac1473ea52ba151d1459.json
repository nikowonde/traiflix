{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\search.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPersonInfo } from '../store/actions/homepageActions';\nvar img_url = 'https://image.tmdb.org/t/p/original';\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchPage, _React$Component);\n\n  function SearchPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      personId: '',\n      person_results: []\n    };\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //this.props.fetchPersonInfo(this.state.personId)let changeId;\n      var pid;\n\n      if (this.props.results.lenght > 0) {\n        if (this.props.results[0].results[0].media_type === 'person') {\n          this.state.person_results = this.props.results[0].results[0];\n          pid = person_results.id;\n        } else if (this.props.results[0].results[1].media_type === 'person') {\n          this.state.person_results = this.props.results[0].results[1];\n          pid = person_results.id;\n        } else if (this.props.results[0].results[2].media_type === 'person') {\n          this.state.person_results = this.props.results[0].results[2];\n          pid = person_results.id;\n        }\n      }\n\n      this.setState({\n        personId: pid,\n        person_results: person_results\n      });\n      console.log(pid);\n      console.log(this.state.personId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      /*let callId = () => {\r\n          if(this.props.results.length > 0){\r\n              if(this.props.results[0].results[0].media_type === 'person'){\r\n                  changeId(pid);\r\n              } else if(this.props.results[0].results[1].media_type === 'person'){\r\n                  changeId(pid);\r\n              } else if(this.props.results[0].results[2].media_type === 'person'){\r\n                  changeId(pid)\r\n              } else {\r\n                  this.setState({ personId: 'gazeebo'})\r\n              }\r\n          }\r\n      }\r\n        callId();*/\n      var results;\n\n      if (this.props.results.length > 0) {\n        console.log(this.props.results[0].results[0].media_type);\n        results = this.props.results[0].results.map(function (rs) {\n          if (rs.media_type === 'movie' && rs.poster_path !== null) return React.createElement(\"div\", {\n            className: \".col-md-4 search-container\",\n            key: rs.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"search-results\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, React.createElement(\"h5\", {\n            className: \"search-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, rs.title), React.createElement(\"img\", {\n            className: \"search-image\",\n            src: \"\".concat(img_url).concat(rs.poster_path),\n            alt: rs.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            className: \"search-release\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, \"Released: \".concat(rs.release_date)), React.createElement(\"p\", {\n            className: \"search-vote\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, \"Rating: \".concat(rs.vote_average))));\n          if (rs.poster_path === 'null' || rs.poster_path === '') return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, null);\n          if (rs.media_type === 'tv' && rs.poster_path !== null) return React.createElement(\"div\", {\n            className: \".col-md-4 search-container\",\n            key: rs.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"search-results\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, React.createElement(\"h5\", {\n            className: \"search-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, rs.name), React.createElement(\"img\", {\n            className: \"search-image\",\n            src: \"\".concat(img_url).concat(rs.poster_path),\n            alt: rs.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            className: \"search-release\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, \"Aired: \".concat(rs.first_air_date)), React.createElement(\"p\", {\n            className: \"search-vote\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, \"Rating: \".concat(rs.vote_average))));\n          if (rs.poster_path === '' || rs.backdrop_path === '') return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, null);\n        });\n      }\n\n      if (this.props.results.length > 0) {\n        return React.createElement(\"div\", {\n          className: \".col-md-4 search-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"search-results-person\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"search-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, this.state.person_results.name), React.createElement(\"img\", {\n          className: \"search-image\",\n          src: \"\".concat(img_url).concat(this.state.person_results.profile_path),\n          alt: this.state.person_results.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        })));\n        /*if (this.props.results[0].results[0].media_type === 'person'){\r\n            person_results = this.props.results[0].results[0];\r\n            pid = person_results.id;\r\n            return (\r\n                <div className='.col-md-4 search-container'>\r\n                        <div className='search-results-person'>\r\n                            <h5 className='search-title'>{person_results.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${person_results.profile_path}`} alt={person_results.name} />\r\n                        </div>\r\n                </div>\r\n            )\r\n        } else if (this.props.results[0].results[1].media_type === 'person'){\r\n            person_results = this.props.results[0].results[1];\r\n            pid = person_results.id;\r\n            return (\r\n                <div className='.col-md-4 search-container'>\r\n                        <div className='search-results-person'>\r\n                            <h5 className='search-title'>{person_results.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${person_results.profile_path}`} alt={person_results.name} />\r\n                        </div>\r\n                </div>\r\n            )\r\n        } else if (this.props.results[0].results[2].media_type === 'person'){\r\n            person_results = this.props.results[0].results[2];\r\n            pid = person_results.id;\r\n            return (\r\n                <div className='.col-md-4 search-container'>\r\n                        <div className='search-results-person'>\r\n                            <h5 className='search-title'>{person_results.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${person_results.profile_path}`} alt={person_results.name} />\r\n                        </div>\r\n                </div>\r\n            )\r\n        }*/\n      }\n      /*let person;\r\n          if (props.person.length > 0){\r\n              person = props.person.map(person => {\r\n                })\r\n          }*/\n\n\n      return React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, results, this.state.person_results));\n    }\n  }]);\n\n  return SearchPage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.movTv.results,\n    person: state.movTv.personInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPersonInfo: fetchPersonInfo\n})(SearchPage);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\search.js"],"names":["React","connect","fetchPersonInfo","img_url","SearchPage","state","personId","person_results","pid","props","results","lenght","media_type","id","setState","console","log","length","map","rs","poster_path","title","release_date","vote_average","name","first_air_date","backdrop_path","profile_path","Component","mapStateToProps","movTv","person","personInfo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport { fetchPersonInfo } from '../store/actions/homepageActions'\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\n\r\nclass SearchPage extends React.Component {\r\n\r\n    state = {\r\n        personId: '',\r\n        person_results: [],\r\n    }\r\n\r\n        componentDidUpdate(){\r\n            //this.props.fetchPersonInfo(this.state.personId)let changeId;\r\n            let pid;\r\n            if(this.props.results.lenght > 0){\r\n                if (this.props.results[0].results[0].media_type === 'person'){\r\n                    this.state.person_results = this.props.results[0].results[0];\r\n                    pid = person_results.id;\r\n                } else if (this.props.results[0].results[1].media_type === 'person'){\r\n                    this.state.person_results = this.props.results[0].results[1];\r\n                    pid = person_results.id;\r\n                } else if (this.props.results[0].results[2].media_type === 'person'){\r\n                    this.state.person_results = this.props.results[0].results[2];\r\n                    pid = person_results.id\r\n                }\r\n            }\r\n            this.setState({\r\n                personId: pid,\r\n                person_results\r\n            })\r\n            console.log(pid);\r\n            console.log(this.state.personId);\r\n        }\r\n        \r\n\r\n    render(){\r\n        /*let callId = () => {\r\n            if(this.props.results.length > 0){\r\n                if(this.props.results[0].results[0].media_type === 'person'){\r\n                    changeId(pid);\r\n                } else if(this.props.results[0].results[1].media_type === 'person'){\r\n                    changeId(pid);\r\n                } else if(this.props.results[0].results[2].media_type === 'person'){\r\n                    changeId(pid)\r\n                } else {\r\n                    this.setState({ personId: 'gazeebo'})\r\n                }\r\n            }\r\n        }\r\n\r\n        callId();*/\r\n    let results;\r\n        if(this.props.results.length > 0){\r\n            console.log(this.props.results[0].results[0].media_type);\r\n            results = this.props.results[0].results.map(rs => {\r\n                if(rs.media_type === 'movie' && rs.poster_path !== null)\r\n                    return (\r\n                        <div className='.col-md-4 search-container' key={rs.id}>\r\n                            <div className='search-results'>\r\n                                <h5 className='search-title'>{rs.title}</h5>\r\n                                <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                                <p className='search-release'>{`Released: ${rs.release_date}`}</p>\r\n                                <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                                {\r\n                                //<p className='search-overview'>{rs.overview}</p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                if (rs.poster_path === 'null' || rs.poster_path === '')\r\n                        return (<div>{null}</div>)\r\n                if (rs.media_type === 'tv' && rs.poster_path !== null)\r\n                    return (\r\n                    <div className='.col-md-4 search-container' key={rs.id}>\r\n                        <div className='search-results'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                            <p className='search-release'>{`Aired: ${rs.first_air_date}`}</p>\r\n                            <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                            {\r\n                                //<p className='search-overview'>{rs.overview}</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                if (rs.poster_path === '' || rs.backdrop_path === '')\r\n                        return (<div>{null}</div>);\r\n            } \r\n            )\r\n        }\r\n            if (this.props.results.length > 0){\r\n                return (\r\n                    <div className='.col-md-4 search-container'>\r\n                        <div className='search-results-person'>\r\n                            <h5 className='search-title'>{this.state.person_results.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${this.state.person_results.profile_path}`} alt={this.state.person_results.name} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n                /*if (this.props.results[0].results[0].media_type === 'person'){\r\n                    person_results = this.props.results[0].results[0];\r\n                    pid = person_results.id;\r\n                    return (\r\n                        <div className='.col-md-4 search-container'>\r\n                                <div className='search-results-person'>\r\n                                    <h5 className='search-title'>{person_results.name}</h5>\r\n                                    <img className='search-image' src={`${img_url}${person_results.profile_path}`} alt={person_results.name} />\r\n                                </div>\r\n                        </div>\r\n                    )\r\n                } else if (this.props.results[0].results[1].media_type === 'person'){\r\n                    person_results = this.props.results[0].results[1];\r\n                    pid = person_results.id;\r\n                    return (\r\n                        <div className='.col-md-4 search-container'>\r\n                                <div className='search-results-person'>\r\n                                    <h5 className='search-title'>{person_results.name}</h5>\r\n                                    <img className='search-image' src={`${img_url}${person_results.profile_path}`} alt={person_results.name} />\r\n                                </div>\r\n                        </div>\r\n                    )\r\n                } else if (this.props.results[0].results[2].media_type === 'person'){\r\n                    person_results = this.props.results[0].results[2];\r\n                    pid = person_results.id;\r\n                    return (\r\n                        <div className='.col-md-4 search-container'>\r\n                                <div className='search-results-person'>\r\n                                    <h5 className='search-title'>{person_results.name}</h5>\r\n                                    <img className='search-image' src={`${img_url}${person_results.profile_path}`} alt={person_results.name} />\r\n                                </div>\r\n                        </div>\r\n                    )\r\n                }*/\r\n            }\r\n\r\n    /*let person;\r\n        if (props.person.length > 0){\r\n            person = props.person.map(person => {\r\n\r\n            })\r\n        }*/\r\n            return (\r\n                <div className='container-fluid'>\r\n                        <div className='row'>\r\n                                {results}\r\n                                {this.state.person_results}\r\n                        </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.movTv.results,\r\n        person: state.movTv.personInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPersonInfo })(SearchPage);"]},"metadata":{},"sourceType":"module"}