{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\search.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPersonInfo } from '../store/actions/homepageActions';\nvar img_url = 'https://image.tmdb.org/t/p/original';\nvar personId;\n\nvar SearchPage = function SearchPage(props) {\n  var results;\n\n  if (props.results.length > 0) {\n    results = props.results[0].results.map(function (rs) {\n      if (rs.media_type === 'movie' && rs.poster_path !== null) return React.createElement(\"div\", {\n        className: \".col-md-4\",\n        key: rs.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"search-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, rs.title), React.createElement(\"img\", {\n        className: \"search-image\",\n        src: \"\".concat(img_url).concat(rs.poster_path),\n        alt: rs.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"search-release\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Released: \".concat(rs.release_date)), React.createElement(\"p\", {\n        className: \"search-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Rating: \".concat(rs.vote_average))));\n      if (rs.poster_path === 'null' || rs.poster_path === '') return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, null);\n      if (rs.media_type === 'tv' && rs.poster_path !== null) return React.createElement(\"div\", {\n        className: \".col-md-4\",\n        key: rs.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"search-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, rs.name), React.createElement(\"img\", {\n        className: \"search-image\",\n        src: \"\".concat(img_url).concat(rs.poster_path),\n        alt: rs.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"search-release\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Aired: \".concat(rs.first_air_date)), React.createElement(\"p\", {\n        className: \"search-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Rating: \".concat(rs.vote_average))));\n      if (rs.poster_path === '' || rs.backdrop_path === '') return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, null);\n    });\n  }\n  /*\r\n          if (rs.media_type === 'person');\r\n          personId = rs.id;\r\n          return (\r\n                  <div className='row' key={rs.id}>\r\n                      <div className='.col-md-4'>\r\n                          <div className='search-results-person'>\r\n                              <h5 className='search-title'>{rs.name}</h5>\r\n                              <img className='search-image' src={`${img_url}${rs.profile_path}`} alt={rs.name} />\r\n                              <button onClick={() => props.fetchPersonInfo(personId)}>Click This</button>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n          )\r\n  */\n\n  /*let person;\r\n      if (props.person.length > 0){\r\n          person = props.person.map(person => {\r\n            })\r\n      }*/\n\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"search-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, results)));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.movTv.results,\n    person: state.movTv.personInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPersonInfo: fetchPersonInfo\n})(SearchPage);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\search.js"],"names":["React","connect","fetchPersonInfo","img_url","personId","SearchPage","props","results","length","map","rs","media_type","poster_path","id","title","release_date","vote_average","name","first_air_date","backdrop_path","mapStateToProps","state","movTv","person","personInfo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport { fetchPersonInfo } from '../store/actions/homepageActions'\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nlet personId;\r\n\r\nconst SearchPage = (props) => {\r\n    let results;\r\n        if(props.results.length > 0){\r\n            results = props.results[0].results.map(rs => {\r\n                if(rs.media_type === 'movie' && rs.poster_path !== null)\r\n                    return (\r\n                        <div className='.col-md-4' key={rs.id}>\r\n                            <div className='search-results'>\r\n                                <h5 className='search-title'>{rs.title}</h5>\r\n                                <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                                <p className='search-release'>{`Released: ${rs.release_date}`}</p>\r\n                                <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                                {\r\n                                //<p className='search-overview'>{rs.overview}</p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                if (rs.poster_path === 'null' || rs.poster_path === '')\r\n                        return (<div>{null}</div>)\r\n                if (rs.media_type === 'tv' && rs.poster_path !== null)\r\n                    return (\r\n                    <div className='.col-md-4' key={rs.id}>\r\n                        <div className='search-results'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                            <p className='search-release'>{`Aired: ${rs.first_air_date}`}</p>\r\n                            <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                            {\r\n                                //<p className='search-overview'>{rs.overview}</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                if (rs.poster_path === '' || rs.backdrop_path === '')\r\n                        return (<div>{null}</div>);\r\n            } \r\n            \r\n            )\r\n        }\r\n\r\n/*\r\n        if (rs.media_type === 'person');\r\n        personId = rs.id;\r\n        return (\r\n                <div className='row' key={rs.id}>\r\n                    <div className='.col-md-4'>\r\n                        <div className='search-results-person'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${rs.profile_path}`} alt={rs.name} />\r\n                            <button onClick={() => props.fetchPersonInfo(personId)}>Click This</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        )\r\n*/\r\n    /*let person;\r\n        if (props.person.length > 0){\r\n            person = props.person.map(person => {\r\n\r\n            })\r\n        }*/\r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row'>\r\n                <span className='search-container'>\r\n                    {results}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.movTv.results,\r\n        person: state.movTv.personInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPersonInfo })(SearchPage);"]},"metadata":{},"sourceType":"module"}