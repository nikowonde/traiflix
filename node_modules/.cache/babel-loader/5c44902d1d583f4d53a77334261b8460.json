{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\search.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPersonInfo } from '../store/actions/homepageActions';\nvar img_url = 'https://image.tmdb.org/t/p/original';\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchPage, _Component);\n\n  function SearchPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      personId: ''\n    };\n\n    _this.componentDidUpdate = function () {\n      if (_this.props.results.length > 0 && _this.state.personId !== _this.props.results[0].results[0].id) {\n        _this.props.fetchPersonInfo();\n\n        if (_this.props.results[0].results[0].media_type === 'person') {\n          _this.setState({\n            personId: _this.props.results[0].results[0].id\n          }, _this.personInfo());\n        }\n      }\n    };\n\n    _this.personInfo = function () {\n      console.log('hello');\n    };\n\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"render\",\n\n    /*fetchPerson = (prevProps) => {\r\n        if(pid.length > 0 && prevProps.pid !== pid){\r\n            this.props.fetchPersonInfo(pid);\r\n        }\r\n    }*/\n    value: function render() {\n      console.log(this.state.personId);\n      var results;\n\n      if (this.props.results.length > 0 && this.props.results[0].results[0].media_type !== 'person' && this.props.results[0].results[1].media_type !== 'person' && this.props.results[0].results[2].media_type !== 'person') {\n        //console.log(this.props.results[0].results[0].media_type);\n        results = this.props.results[0].results.map(function (rs) {\n          if (rs.media_type === 'movie' && rs.poster_path !== null) {\n            return React.createElement(\"div\", {\n              className: \".col-md-4 search-container\",\n              key: rs.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 43\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"search-results\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44\n              },\n              __self: this\n            }, React.createElement(\"h5\", {\n              className: \"search-title\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45\n              },\n              __self: this\n            }, rs.title), React.createElement(\"img\", {\n              className: \"search-image\",\n              src: \"\".concat(img_url).concat(rs.poster_path),\n              alt: rs.title,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            }), React.createElement(\"p\", {\n              className: \"search-release\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47\n              },\n              __self: this\n            }, \"Released: \".concat(rs.release_date)), React.createElement(\"p\", {\n              className: \"search-vote\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48\n              },\n              __self: this\n            }, \"Rating: \".concat(rs.vote_average))));\n          }\n\n          if (rs.poster_path === 'null' || rs.poster_path === '' || rs.media_type === 'person') {\n            return React.createElement(\"div\", {\n              key: rs.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            }, null);\n          }\n\n          if (rs.media_type === 'tv' && rs.poster_path !== null) {\n            return React.createElement(\"div\", {\n              className: \".col-md-4 search-container\",\n              key: rs.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 56\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"search-results\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57\n              },\n              __self: this\n            }, React.createElement(\"h5\", {\n              className: \"search-title\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58\n              },\n              __self: this\n            }, rs.name), React.createElement(\"img\", {\n              className: \"search-image\",\n              src: \"\".concat(img_url).concat(rs.poster_path),\n              alt: rs.title,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 59\n              },\n              __self: this\n            }), React.createElement(\"p\", {\n              className: \"search-release\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60\n              },\n              __self: this\n            }, \"Aired: \".concat(rs.first_air_date)), React.createElement(\"p\", {\n              className: \"search-vote\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61\n              },\n              __self: this\n            }, \"Rating: \".concat(rs.vote_average))));\n          }\n\n          if (rs.poster_path === '' || rs.backdrop_path === '' || rs.media_type === 'person') {\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 66\n              },\n              __self: this\n            }, null);\n          }\n        });\n      }\n\n      var person_results;\n\n      if (this.props.results.length > 0) {\n        if (this.props.results[0].results[0].media_type === 'person' || this.props.results[0].results[1].media_type === 'person' || this.props.results[0].results[2].media_type === 'person') {\n          //onsole.log(this.props.results[0]);\n          person_results = this.props.results[0].results.map(function (pr) {\n            if (pr.profile_path !== null && pr.backdrop_path !== null && pr.media_type !== 'tv' && pr.media_type !== 'movie') {\n              return React.createElement(\"div\", {\n                className: \".col-md-4 search-container\",\n                key: pr.id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 77\n                },\n                __self: this\n              }, React.createElement(\"div\", {\n                className: \"search-results-person\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 78\n                },\n                __self: this\n              }, React.createElement(\"h5\", {\n                className: \"search-title\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 79\n                },\n                __self: this\n              }, pr.name), React.createElement(\"img\", {\n                className: \"search-image\",\n                src: \"\".concat(img_url).concat(pr.profile_path),\n                alt: pr.name,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 80\n                },\n                __self: this\n              })));\n            }\n          });\n        } else {\n          return React.createElement(\"div\", {\n            className: \"loading\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, \"Loading...\");\n        }\n      }\n      /*let person;\r\n          if (props.person.length > 0){\r\n              person = props.person.map(person => {\r\n                })\r\n          }*/\n\n\n      return React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, results, person_results));\n    }\n  }]);\n\n  return SearchPage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.movTv.results,\n    person: state.movTv.personInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPersonInfo: fetchPersonInfo\n})(SearchPage);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\search.js"],"names":["React","Component","connect","fetchPersonInfo","img_url","SearchPage","state","personId","componentDidUpdate","props","results","length","id","media_type","setState","personInfo","console","log","map","rs","poster_path","title","release_date","vote_average","name","first_air_date","backdrop_path","person_results","pr","profile_path","mapStateToProps","movTv","person"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPersonInfo } from '../store/actions/homepageActions';\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nclass SearchPage extends Component {\r\n    \r\n    state = {\r\n        personId: '',\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if(this.props.results.length > 0 && this.state.personId !== this.props.results[0].results[0].id){\r\n            this.props.fetchPersonInfo();\r\n            if(this.props.results[0].results[0].media_type === 'person'){\r\n                this.setState({personId: this.props.results[0].results[0].id}, this.personInfo());\r\n            }\r\n        }\r\n    }\r\n\r\n    personInfo = () => {\r\n        console.log('hello')\r\n    }\r\n\r\n\r\n    /*fetchPerson = (prevProps) => {\r\n        if(pid.length > 0 && prevProps.pid !== pid){\r\n            this.props.fetchPersonInfo(pid);\r\n        }\r\n    }*/\r\n\r\n\r\n    render(){\r\n    console.log(this.state.personId)\r\n    let results;\r\n        if(this.props.results.length > 0 && this.props.results[0].results[0].media_type !== 'person' && this.props.results[0].results[1].media_type !== 'person' && this.props.results[0].results[2].media_type !== 'person'){\r\n            //console.log(this.props.results[0].results[0].media_type);\r\n            results = this.props.results[0].results.map(rs => {\r\n                if(rs.media_type === 'movie' && rs.poster_path !== null){\r\n                    return (\r\n                        <div className='.col-md-4 search-container' key={rs.id}>\r\n                            <div className='search-results'>\r\n                                <h5 className='search-title'>{rs.title}</h5>\r\n                                <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                                <p className='search-release'>{`Released: ${rs.release_date}`}</p>\r\n                                <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                if (rs.poster_path === 'null' || rs.poster_path === '' || rs.media_type === 'person'){\r\n                        return (<div key={rs.id}>{null}</div>)}\r\n                if (rs.media_type === 'tv' && rs.poster_path !== null){\r\n                    return (\r\n                    <div className='.col-md-4 search-container' key={rs.id}>\r\n                        <div className='search-results'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                            <p className='search-release'>{`Aired: ${rs.first_air_date}`}</p>\r\n                            <p className='search-vote'>{`Rating: ${rs.vote_average}`}</p>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                if (rs.poster_path === '' || rs.backdrop_path === '' || rs.media_type === 'person'){\r\n                        return (<div>{null}</div>);}\r\n            } \r\n            )\r\n        }\r\n        let person_results;\r\n            if (this.props.results.length > 0 ){\r\n                if (this.props.results[0].results[0].media_type === 'person' || this.props.results[0].results[1].media_type === 'person' || this.props.results[0].results[2].media_type === 'person'){\r\n                    //onsole.log(this.props.results[0]);\r\n                    person_results = this.props.results[0].results.map(pr => {\r\n                    if(pr.profile_path !== null && pr.backdrop_path !== null && pr.media_type !== 'tv' && pr.media_type !== 'movie'){\r\n                    return (\r\n                        <div className='.col-md-4 search-container' key={pr.id}>\r\n                                <div className='search-results-person'>\r\n                                    <h5 className='search-title'>{pr.name}</h5>\r\n                                    <img className='search-image' src={`${img_url}${pr.profile_path}`} alt={pr.name} />\r\n                                </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            )\r\n                }  else {\r\n                    return <div className='loading'>Loading...</div>\r\n                }\r\n            }\r\n\r\n    /*let person;\r\n        if (props.person.length > 0){\r\n            person = props.person.map(person => {\r\n\r\n            })\r\n        }*/\r\n            return (\r\n                <div className='container-fluid'>\r\n                        <div className='row'>\r\n                                {results}\r\n                                {person_results}\r\n                        </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.movTv.results,\r\n        person: state.movTv.personInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPersonInfo })(SearchPage);"]},"metadata":{},"sourceType":"module"}