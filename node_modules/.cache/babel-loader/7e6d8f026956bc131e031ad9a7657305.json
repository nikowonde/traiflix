{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wonde\\\\Desktop\\\\react\\\\traiflix\\\\traiflix\\\\src\\\\components\\\\search.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nvar img_url = 'https://image.tmdb.org/t/p/original';\n\nvar SearchPage = function SearchPage(props) {\n  var results;\n\n  if (props.results.length > 0) {\n    results = props.results[0].results.map(function (rs) {\n      if (rs.media_type === 'movie' && rs.poster_path !== 'null') return React.createElement(\"div\", {\n        className: \".col-md-4\",\n        key: rs.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"search-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, rs.title), React.createElement(\"p\", {\n        className: \"search-release\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, rs.release_date), React.createElement(\"p\", {\n        className: \"search-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, rs.vote_average), React.createElement(\"p\", {\n        className: \"search-overview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, rs.overview), React.createElement(\"img\", {\n        className: \"search-image\",\n        src: \"\".concat(img_url).concat(rs.poster_path),\n        alt: rs.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      })));\n      if (rs.poster_path === 'null' || rs.poster_path === '') return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, null);\n      if (rs.media_type === 'tv') return React.createElement(\"div\", {\n        className: \".col-md-4\",\n        key: rs.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"search-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, rs.name), React.createElement(\"p\", {\n        className: \"search-release\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, rs.first_air_date), React.createElement(\"p\", {\n        className: \"search-vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, rs.vote_average), React.createElement(\"p\", {\n        className: \"search-overview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, rs.overview), React.createElement(\"img\", {\n        className: \"search-image\",\n        src: \"\".concat(img_url).concat(rs.poster_path),\n        alt: rs.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      })));\n      if (rs.poster_path === '' || rs.backdrop_path === '') return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, null);\n      /*if (rs.media_type === 'person'){\r\n          return (\r\n              <div className='.col-md-4' key={rs.id}>\r\n                  <h5 className='search-title'>Nick Cage</h5>\r\n              </div>\r\n          )\r\n      }*/\n      else {\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, \"Something is wrong\");\n        }\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, results));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    results: state.movTv.results\n  };\n};\n\nexport default connect(mapStateToProps)(SearchPage);","map":{"version":3,"sources":["C:\\Users\\wonde\\Desktop\\react\\traiflix\\traiflix\\src\\components\\search.js"],"names":["React","connect","img_url","SearchPage","props","results","length","map","rs","media_type","poster_path","id","title","release_date","vote_average","overview","name","first_air_date","backdrop_path","mapStateToProps","state","movTv"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst img_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst SearchPage = (props) => {\r\n    let results;\r\n        if(props.results.length > 0){\r\n            results = props.results[0].results.map(rs => {\r\n                if(rs.media_type === 'movie' && rs.poster_path !== 'null')\r\n                    return (\r\n                        <div className='.col-md-4' key={rs.id}>\r\n                            <div className='search-results'>\r\n                                <h5 className='search-title'>{rs.title}</h5>\r\n                                <p className='search-release'>{rs.release_date}</p>\r\n                                <p className='search-vote'>{rs.vote_average}</p>\r\n                                <p className='search-overview'>{rs.overview}</p>\r\n                                <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                if (rs.poster_path === 'null' || rs.poster_path === '')\r\n                        return (<div>{null}</div>)\r\n                if (rs.media_type === 'tv')\r\n                    return (\r\n                    <div className='.col-md-4' key={rs.id}>\r\n                        <div className='search-results'>\r\n                            <h5 className='search-title'>{rs.name}</h5>\r\n                            <p className='search-release'>{rs.first_air_date}</p>\r\n                            <p className='search-vote'>{rs.vote_average}</p>\r\n                            <p className='search-overview'>{rs.overview}</p>\r\n                            <img className='search-image' src={`${img_url}${rs.poster_path}`} alt={rs.title} />\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                if (rs.poster_path === '' || rs.backdrop_path === '')\r\n                        return (<div>{null}</div>);\r\n                /*if (rs.media_type === 'person'){\r\n                    return (\r\n                        <div className='.col-md-4' key={rs.id}>\r\n                            <h5 className='search-title'>Nick Cage</h5>\r\n                        </div>\r\n                    )\r\n                }*/ else {\r\n                    return <p>Something is wrong</p>\r\n                }\r\n            }\r\n            \r\n            )\r\n        }\r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row'>\r\n                {results}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.movTv.results\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SearchPage);"]},"metadata":{},"sourceType":"module"}